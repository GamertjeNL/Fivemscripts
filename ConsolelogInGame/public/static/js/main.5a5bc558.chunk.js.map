{"version":3,"sources":["Console.js","Login.js","Menu.js","ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Console","resourceName","consoleBufferWithCommands","setConsoleBufferWithCommands","exit","useState","input","setInput","buffer","replace","color","colorizeInput","useEffect","console","document","getElementsByClassName","scrollTop","scrollHeight","className","id","role","aria-label","onClick","dangerouslySetInnerHTML","__html","onSubmit","e","preventDefault","prevState","Axios","post","JSON","stringify","newLine","placeholder","value","onChange","target","autoFocus","errorMsg","setErrorMsg","type","style","display","fontWeight","marginBottom","marginTop","fontSize","icon","faDiscord","Menu","displayMenu","setDisplayMenu","setResourceName","consoleBuffer","setConsoleBuffer","isAuthed","setIsAuthed","handleMessage","useCallback","event","data","item","status","auth","error","parse","get","then","response","version","setTimeout","catch","window","addEventListener","removeEventListener","onkeyup","which","exitMenu","Login","ErrorBoundary","props","state","closed","errorInfo","this","setState","textAlign","whiteSpace","toString","componentStack","location","reload","children","React","Component","App","Boolean","hostname","match","Sentry","dsn","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5a5bc558.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './console.css'\r\nimport Axios from 'axios';\r\n\r\nfunction Console({ resourceName, consoleBufferWithCommands, setConsoleBufferWithCommands, exit }) {\r\n    const [input, setInput] = useState('')\r\n\r\n    const buffer = '<span>' + consoleBufferWithCommands.replace(/\\^([0-9])/g, ([, color]) => `</span><span class=\"color-${color}\">`) + '</span>'\r\n\r\n    useEffect(() => {\r\n        const console = document.getElementsByClassName('console')[0]\r\n        console.scrollTop = console.scrollHeight\r\n    }, [consoleBufferWithCommands])\r\n\r\n    function handleInputChange(e) {\r\n        setInput(e.target.value)\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n        if ( input === 'restart ' + resourceName || input === 'stop ' + resourceName ) {\r\n            setConsoleBufferWithCommands(prevState => prevState + colorizeInput(input) + `\\n^1SCRIPT ERROR: @${resourceName} cannot restart/stop itself.^7\\n`)\r\n            setInput('')\r\n            return\r\n        }\r\n        Axios.post(`http://${resourceName}/ExecuteConsoleCommand`, JSON.stringify(input))\r\n        const newLine = colorizeInput(input) + '\\n'\r\n        setConsoleBufferWithCommands(prevState => prevState + newLine + '^0')\r\n        setInput('')\r\n    }\r\n\r\n    function colorizeInput(input) {\r\n        return input.replace(/(^[^ ]+)/, '^6$1^7')\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"TopBar\">\r\n                Console\r\n                <span id=\"cclose\" role=\"img\" aria-label=\"Close Button\" onClick={exit}>&#10060;</span>\r\n            </div>\r\n            <div className=\"console\" dangerouslySetInnerHTML={{__html: buffer}}/>\r\n            <form onSubmit={handleSubmit}>\r\n                <input className=\"consoleInput\" placeholder=\"Enter command...\" value={input} onChange={handleInputChange} autoFocus/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Console;","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faDiscord } from '@fortawesome/free-brands-svg-icons'\r\nimport './login.css'\r\nimport Axios from 'axios';\r\n\r\nfunction Console({resourceName, errorMsg, setErrorMsg, exit}) {\r\n    const [input, setInput] = useState('')\r\n   \r\n    function handleInputChange(e) {\r\n        setInput(e.target.value)\r\n        setErrorMsg('')\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n        Axios.post(`http://${resourceName}/CheckPasssword`, JSON.stringify(input))\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <span id=\"close\" role=\"img\" aria-label=\"Close Button\" onClick={exit}>&#10060;</span>\r\n            <h1>Ingame Console</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"password\" placeholder=\"Enter rcon password...\" value={input} onChange={handleInputChange} autoFocus/>\r\n                <div style={{color: 'red', display: 'inline-block', fontWeight: '500', marginBottom: '20px'}}>{errorMsg}</div>\r\n                <div>\r\n                    <button type=\"button\" onClick={exit}>Close</button>\r\n                    <button type=\"submit\">Login</button>\r\n                </div>\r\n            </form>\r\n            <p style={{marginTop: '45px', fontSize: '18px'}}>Made by <FontAwesomeIcon icon={faDiscord} /> gegen#4674</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Console;","import React, { useState, useCallback, useEffect } from 'react';\r\nimport Axios from 'axios';\r\nimport './main.css';\r\nimport Console from './Console'\r\nimport Login from './Login'\r\n\r\nconst curVersion = \"1.2\"\r\n\r\nconst Menu = () => {\r\n    const [displayMenu, setDisplayMenu] = useState(!process.env.NODE_ENV || process.env.NODE_ENV === 'development' ? false : false) // Change to false in production\r\n    const [resourceName, setResourceName] = useState('console')\r\n    const [consoleBufferWithCommands, setConsoleBufferWithCommands] = useState('')\r\n    const [consoleBuffer, setConsoleBuffer] = useState('')\r\n    const [isAuthed, setIsAuthed] = useState(false)\r\n    const [errorMsg, setErrorMsg] = useState('')\r\n\r\n    const handleMessage = useCallback((event) => {\r\n        if (!event.data) return\r\n        //const item = event.detail.data //IMPORTANT REMOVE DETAIL FOR BUILD!\r\n        const item = event.data;\r\n        if (item.type === \"ui\") {\r\n            if (item.status === true) {\r\n                setDisplayMenu(true);\r\n            } else {\r\n                setDisplayMenu(false);\r\n            }\r\n        } else if (item.type === \"ResourceName\") {\r\n            setResourceName(item.value || 'console')\r\n        } else if (item.type === \"SetAuth\") {\r\n            setIsAuthed(item.auth || false)\r\n            if (item.auth === false) {\r\n                setConsoleBufferWithCommands('')\r\n                setConsoleBuffer('')\r\n            }\r\n        } else if (item.type === \"ErrorMsg\") {\r\n            setErrorMsg(item.error || '')\r\n        } else if (item.type === \"ConsoleBuffer\") {\r\n            if (item.data) {\r\n                const data = JSON.parse(item.data);\r\n                if (data !== consoleBuffer) {\r\n                    setConsoleBufferWithCommands(prevState => prevState + data.replace(consoleBuffer, ''))\r\n                    setConsoleBuffer(data)\r\n                }\r\n            }\r\n        }\r\n    }, [consoleBuffer])\r\n    \r\n    useEffect(() => {\r\n        if (isAuthed) {\r\n            Axios.get('https://raw.githubusercontent.com/gegen/IngameConsole/master/version.json')\r\n            .then((response) => {\r\n                const version = response.data.version\r\n                if (version > curVersion) {\r\n                    setTimeout(()=>\r\n                        setConsoleBufferWithCommands(prevState => prevState + `\\n^3----- ^1New Update:^3 -----------------------------------------\\n\\nFiveM Ingame Console has a new version.\\nNewest version: ${version}\\nInstalled version: ${curVersion}\\nInstall at: ^0https://github.com/gegen/IngameConsole^3\\n\\n-----------------------------------------------------------^0\\n\\n`)\r\n                        , 2000\r\n                    )\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error(error)\r\n            })\r\n        }\r\n    }, [isAuthed])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('message', handleMessage)\r\n        return () => window.removeEventListener('message', handleMessage)\r\n    }, [handleMessage])\r\n\r\n    document.onkeyup = function (event) {\r\n        if (event.which === 27) { // ESC/m (close menu)\r\n            exitMenu();\r\n        }\r\n    }\r\n\r\n    const exitMenu = () => Axios.post(`http://${resourceName}/exit`, JSON.stringify(''));\r\n\r\n    return (\r\n        displayMenu &&\r\n            <>\r\n                {\r\n                    isAuthed ?\r\n                        <Console \r\n                            resourceName={resourceName}\r\n                            consoleBufferWithCommands={consoleBufferWithCommands}\r\n                            setConsoleBufferWithCommands={setConsoleBufferWithCommands}\r\n                            exit={exitMenu}\r\n                        />\r\n                    :\r\n                        <Login \r\n                            resourceName={resourceName}\r\n                            errorMsg={errorMsg}\r\n                            setErrorMsg={setErrorMsg}\r\n                            exit={exitMenu}\r\n                        />\r\n                }\r\n            </>\r\n    )\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport './ErrorBoundry.css';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { closed: false, error: null, errorInfo: null };\r\n    }\r\n  \r\n    componentDidCatch(error, errorInfo) {\r\n        // You can also log the error to an error reporting service\r\n        this.setState({\r\n            error: error,\r\n            errorInfo: errorInfo\r\n          })\r\n    }\r\n  \r\n    render() {\r\n        if (this.state.errorInfo) {\r\n            if (this.state.closed) {\r\n                return null\r\n            }\r\n            return (\r\n                <div className=\"Box\">\r\n                    <h1 style={{ marginBottom: \"10px\" }}>FiveM Ingame Console crashed :(</h1>\r\n                    \r\n                    <details style={{ textAlign: \"left\", whiteSpace: 'pre-wrap', marginBottom:\"30px\" }}>\r\n                        {this.state.error && this.state.error.toString()}\r\n                        <br />\r\n                        {this.state.errorInfo.componentStack}\r\n                    \r\n                    </details>\r\n                    <button className=\"outlinebtn\" onClick={()=>this.setState({closed: true})}>Close Console</button>\r\n                    <button onClick={()=>window.location.reload()}>Restart Console</button>\r\n                </div>\r\n            )\r\n        }\r\n    \r\n        return this.props.children; \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport Menu from './Menu';\r\nimport ErrorBoundry from './ErrorBoundry'\r\n\r\nfunction App() {\r\n  return (\r\n    <ErrorBoundry>\r\n      <Menu />\r\n    </ErrorBoundry>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as Sentry from '@sentry/browser';\r\nimport './reset.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nif (!process.env.NODE_ENV || process.env.NODE_ENV !== 'development') Sentry.init({dsn: \"https://2cef9cfaf8d0479290883d43c2c517fc@o376756.ingest.sentry.io/5241189\"});\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}